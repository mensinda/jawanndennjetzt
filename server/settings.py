"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
import environ
from . import limits

env = environ.Env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Take environment variables from .env file
environ.Env.read_env(os.environ.get('JWDJ_ENV_FILE', BASE_DIR / '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=False)

# SECURITY WARNING: keep the secret key used in production secret!
if DEBUG:
    SECRET_KEY = env('SECRET_KEY', default='django-insecure-6345sdfh')
else:
    SECRET_KEY = env('SECRET_KEY')

if 'django-insecure' in SECRET_KEY and not DEBUG:
    raise RuntimeError('Secret key NOT SET for production!')

# Custom JWDJ options
JWDJ_SUBPATH = env.str('JWDJ_SUBPATH', default='')
JWDJ_SUBPATH = JWDJ_SUBPATH.strip('/')

if DEBUG:
    _DEFAULT_JWDJ_CLIENT_DIST = BASE_DIR / 'client' / 'dist'
else:
    _DEFAULT_JWDJ_CLIENT_DIST = '/static'

JWDJ_CLIENT_DIST = env.str('JWDJ_CLIENT_DIST', _DEFAULT_JWDJ_CLIENT_DIST)

JWDJ_SERVE_STATIC_FILES = env.bool('JWDJ_SERVE_STATIC_FILES', default=DEBUG)

JWDJ_DAYS_TO_KEEP = env.int('JWDJ_DAYS_TO_KEEP', default=32)

JWDJ_MAX_POLL_COUNT    = env.int('JWDJ_MAX_POLL_COUNT',    default=4096)
JWDJ_MAX_OPTIONS_COUNT = env.int('JWDJ_MAX_OPTIONS_COUNT', default=64)
JWDJ_MAX_BALLOT_COUNT  = env.int('JWDJ_MAX_BALLOT_COUNT',  default=256)

JWDJ_SESSION_CLEAN_INTERVAL = env.int('JWDJ_SESSION_CLEAN_INTERVAL', default=1)

if JWDJ_MAX_OPTIONS_COUNT >= limits.MAX_VOTES:
    raise RuntimeError(f'Only a maximum of {limits.MAX_VOTES} options are supported per poll ({JWDJ_MAX_OPTIONS_COUNT} where requestd)')

SESSION_COOKIE_AGE = env.int('SESSION_COOKIE_AGE', default=4 * 7 * 24 * 60 * 60)

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['127.0.0.1', 'localhost'])

CSRF_TRUSTED_ORIGINS = [f'{x}://{y}' for x in ('http', 'https') for y in ALLOWED_HOSTS]

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

JWDJ_DATABASE_TYPE = env.str('JWDJ_DATABASE_TYPE', default='sqlite3')

if JWDJ_DATABASE_TYPE == 'postgresql':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': env.str('JWDJ_POSTGRES_NAME'),
            'USER': env.str('JWDJ_POSTGRES_USER'),
            'PASSWORD': env.str('JWDJ_POSTGRES_PASSWORD'),
            'HOST': env.str('JWDJ_POSTGRES_HOST'),
            'PORT': env.str('JWDJ_POSTGRES_PORT'),
        }
    }
elif JWDJ_DATABASE_TYPE == 'sqlite3':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': env.str('JWDJ_SQLITE_FILE', default=str(BASE_DIR / "db.sqlite3")),
        }
    }
else:
    raise RuntimeError(f'Unknown database engine {JWDJ_DATABASE_TYPE}. Supported engines are [sqlite3, postgresql]')

# Application definition

INSTALLED_APPS = [
    "django.contrib.sessions",
    "django.contrib.messages",
    "server",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "server.urls"

TEMPLATES = []

WSGI_APPLICATION = "server.wsgi.application"


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

#STATIC_URL = (JWDJ_SUBPATH + '/' if JWDJ_SUBPATH else '') + 'static/'
#STATICFILES_DIRS = [
#    BASE_DIR / 'client' / 'dist'
#]

MEDIA_URL = None

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
